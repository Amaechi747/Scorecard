#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../dist/app').default;
const http = require('http');
const debug = require('debug')('live-project-scorecard-sq011a:server');
const mongoose = require('mongoose');

// require('dotenv').config()

const db = process.env.dbURI 

/**
 * Connect to database
 */
 

 const dataBase = async function(){
    try{
      if (db !== undefined){
          const isConnected = await mongoose.connect(db);
          if(isConnected){
            debug("DB is connected")
            console.log('DB connected')
          }
      }
    }catch(err){
      
      debug('Error: ', err)
      //  throw new Error(`${error}`)
    }
 }
 dataBase();


//  mongoose.connect(process.env.dbURI)
//  .then(() => debug('Connected to Database'))
//  .catch((err) => debug('Failed to Connect to Database', err));


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

export const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
 
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
